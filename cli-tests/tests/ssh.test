# -*- tcl -*- tcl.tk//DSL tcltest//EN//2.0 tcl.tk//DSL tcltest//EN//2.0
## (c) 2013 Andreas Kupries
# # ## ### ##### ######## ############# #####################
## ssh

kt check Tcl     8.5
kt check tcltest 2

# # ## ### ##### ######## ############# #####################

kt source support/common.tcl

# # ## ### ##### ######## ############# #####################

test ssh-1.0 {ssh, no app} -setup {
    stage-open
    go-admin
} -body {
    run ssh X
} -cleanup {
    stage-close
} -returnCodes error -result {Error: No application specified, and none found in the manifest.}

test ssh-1.1 {ssh, empty application} -setup {
    stage-open
    go-admin
} -body {
    indir [appdir] { run ssh }
} -cleanup {
    remove-appdir
    stage-close
} -returnCodes error -result {Error: No application specified, and none found in the manifest.}

# # ## ### ##### ######## ############# #####################
## Note: Ignoring the 'log' output as it is timing sensitive and may
## not contain everything needed to match because of that.

set flist {total *
-rw-rw-r-- 1 stackato admin * app.js
-rw-r--r-- 1 stackato admin * manifest.yml
-rw-rw-r-- 1 stackato admin * package.json
-rw-rw-r-- 1 stackato admin * README.md
-rw-rw-r-- 1 stackato admin * stackato.yml}

# # ## ### ##### ######## ############# #####################

test ssh-1.2 {ssh, auto-select app} -setup {
    stage-open
    go-admin
    set appdir [example a.original.node-env]
    indir $appdir { run push -n }
} -body {
    indir $appdir { run ssh ls -l }
} -cleanup {
    unset appdir
    remove-test-app node-env
    stage-close
} -match glob -result $flist

# # ## ### ##### ######## ############# #####################

test ssh-1.2 {ssh, auto-select app} -setup {
    stage-open
    go-admin
    set appdir [example a.original.node-env]
    indir $appdir { run push -n }
} -body {
    indir $appdir { run ssh ls -l }
} -cleanup {
    unset appdir
    remove-test-app node-env
    stage-close
} -match glob -result $flist

test ssh-1.3 {ssh, explicit app} -setup {
    stage-open
    go-admin
    set appdir [example a.original.node-env]
    indir $appdir { run push -n }
} -body {
    run ssh -a node-env ls -l
} -cleanup {
    unset appdir
    remove-test-app node-env
    stage-close
} -match glob -result $flist

# todo --target, --group, multiple dependent apps.

# # ## ### ##### ######## ############# #####################

foreach {k cmd dry printed} {
    1 {ls -l}
    {ls -l} {
	{<0>	 = 'ls'}
	{<1>	 = '-l'}
    }
    2 {{ls -l}}
    {"ls -l"} {
	{<0>	 = 'ls'}
	{<1>	 = '-l'}
    }
    3 {{ls -l} a}
    {"ls -l" a} {
	{<0>	 = 'ls'}
	{<1>	 = '-l'}
	{<2>	 = 'a'}
    }
    4 {{ls -l} {a b}}
    {"ls -l" "a b"} {
	{<0>	 = 'ls'}
	{<1>	 = '-l'}
	{<2>	 = 'a'}
	{<3>	 = 'b'}
    }
    5 {{ls -l} {'a b'}}
    {"ls -l" "'a b'"} {
	{<0>	 = 'ls'}
	{<1>	 = '-l'}
	{<2>	 = 'a b'}
    }
} {
    test ssh-2.$k "ssh --dry, $cmd" -setup {
	stage-open
	go-admin
	set appdir [example a.original.node-env]
	indir $appdir { run push -n }
    } -body {
	run ssh --dry -a node-env {*}$cmd
    } -cleanup {
	unset appdir
	remove-test-app node-env
	stage-close
    } -match glob -result "/*/ssh -i */key_* -o IdentitiesOnly=yes -t -o \"PasswordAuthentication no\" -o \"ChallengeResponseAuthentication no\" -o \"PreferredAuthentications publickey\" -2 -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null stackato@[theplaintarget] stackato-ssh * node-env 0 $dry"

    test ssh-3.$k "ssh printargs, $cmd" -setup {
	stage-open
	go-admin
	set appdir [example a.original.node-env]
	indir $appdir { run push -n }
	# Upload testing tool, observe received arguments.
	# Note: This will not see redirections of any type, as these
	# are handled by the shell invoking the command.
	run scp -a node-env [kt find support/printargs] :printargs
	run ssh -a node-env chmod u+x ./printargs
    } -body {
	run ssh -a node-env ./printargs {*}$cmd
    } -cleanup {
	unset appdir
	remove-test-app node-env
	stage-close
    } -match exact -result [join $printed \n]
}

# # ## ### ##### ######## ############# #####################
cleanupTests
