# -*- tcl -*- tcl.tk//DSL tcltest//EN//2.0 tcl.tk//DSL tcltest//EN//2.0
## (c) 2013 Andreas Kupries
# # ## ### ##### ######## ############# #####################
## ssh

kt check Tcl     8.5
kt check tcltest 2

# # ## ### ##### ######## ############# #####################

kt source support/common.tcl

# # ## ### ##### ######## ############# #####################

test ssh-1.0 {ssh, no app} -setup {
    stage-open
    go-admin
} -body {
    run ssh -n X
} -cleanup {
    stage-close
} -returnCodes error -result \
    [per-api \
	 [unexpected option --application application tests] \
	 [unexpected option --application application tests]]
# -match glob -result [no-application-q ssh]

test ssh-1.1 {ssh, empty application} -setup {
    stage-open
    go-admin
} -body {
    indir [appdir] { run ssh -n }
} -cleanup {
    remove-appdir
    stage-close
} -returnCodes error -result \
    [per-api \
	 [unexpected option --application application appdir] \
	 [unexpected option --application application appdir]]
# -match glob -result [no-application-q ssh]

# # ## ### ##### ######## ############# #####################
## Note: Ignoring the 'log' output as it is timing sensitive and may
## not contain everything needed to match because of that.

# # ## ### ##### ######## ############# #####################

test ssh-1.2 {ssh, auto-select app} -setup {
    stage-open
    go-admin
    set appdir [example a.original.node-env]
    indir $appdir { run push -n }
} -body {
    indir $appdir { run ssh ls -l }
} -cleanup {
    unset appdir
    remove-test-app node-env
    stage-close
} -match glob -result [viewFile data/ls-l.txt]

test ssh-1.3 {ssh, explicit app} -setup {
    stage-open
    go-admin
    set appdir [example a.original.node-env]
    indir $appdir { run push -n }
} -body {
    run ssh -a node-env ls -l
} -cleanup {
    unset appdir
    remove-test-app node-env
    stage-close
} -match glob -result [viewFile data/ls-l.txt]

test ssh-1.4 {ssh, auto-select app, explicit --instance} -setup {
    stage-open
    go-admin
    set appdir [example a.original.node-env]
    indir $appdir { run push -n }
} -body {
    indir $appdir { run ssh --instance 0 ls -l }
} -cleanup {
    unset appdir
    remove-test-app node-env
    stage-close
} -match glob -result [viewFile data/ls-l.txt]

test ssh-1.5 {ssh, auto-select app, --all} -setup {
    stage-open
    go-admin
    set appdir [example a.original.node-env]
    indir $appdir { run push -n }
} -body {
    indir $appdir { run ssh --all ls -l }
} -cleanup {
    unset appdir
    remove-test-app node-env
    stage-close
} -match glob -result [viewFile data/ls-l.txt]

TODO ssh --target, --group, multiple dependent apps.
# --group see 4.* below, dry runs

# # ## ### ##### ######## ############# #####################

foreach {k cmd dry printed} {
    1 {ls -l}
    {ls -l} {
	{<0>	 = 'ls'}
	{<1>	 = '-l'}
    }
    2 {{ls -l}}
    {"ls -l"} {
	{<0>	 = 'ls'}
	{<1>	 = '-l'}
    }
    3 {{ls -l} a}
    {"ls -l" a} {
	{<0>	 = 'ls'}
	{<1>	 = '-l'}
	{<2>	 = 'a'}
    }
    4 {{ls -l} {a b}}
    {"ls -l" "a b"} {
	{<0>	 = 'ls'}
	{<1>	 = '-l'}
	{<2>	 = 'a'}
	{<3>	 = 'b'}
    }
    5 {{ls -l} {'a b'}}
    {"ls -l" "'a b'"} {
	{<0>	 = 'ls'}
	{<1>	 = '-l'}
	{<2>	 = 'a b'}
    }
} {
    test ssh-2.$k "ssh --dry, $cmd" -setup {
	stage-open
	go-admin
	set appdir [example a.original.node-env]
	indir $appdir { run push -n }
    } -body {
	run ssh --dry -a node-env {*}$cmd
    } -cleanup {
	unset appdir
	remove-test-app node-env
	stage-close
    } -match glob -result [per-api [ssh-cmd node-env $dry] [ssh-cmd * $dry]]

    test ssh-3.$k "ssh printargs, $cmd" -setup {
	stage-open
	go-admin
	set appdir [example a.original.node-env]
	indir $appdir { run push -n }
	# Upload testing tool, observe received arguments.
	# Note: This will not see redirections of any type, as these
	# are handled by the shell invoking the command.
	run scp -a node-env [kt find support/printargs] :printargs
	run ssh -a node-env chmod u+x ./printargs
    } -body {
	run ssh -a node-env ./printargs {*}$cmd
    } -cleanup {
	unset appdir
	remove-test-app node-env
	stage-close
    } -match exact -result [join $printed \n]

    test ssh-4.$k "ssh --dry --group, $cmd" -constraints cfv1 -setup {
	stage-open
	go-admin
	run groups create   test-group
	run groups add-user test-group [adminuser]
	run group test-group
	set appdir [example a.original.node-env]
	indir $appdir { run push -n }
    } -body {
	run ssh --dry -a node-env {*}$cmd
    } -cleanup {
	unset appdir
	remove-test-app node-env
	run groups delete test-group
	stage-close
    } -match glob -result [ssh-cmd node-env $dry test-group]

    test ssh-5.$k "ssh --dry fake --group, $cmd, bug 103469" -constraints cfv2 -setup {
	stage-open
	go-admin
	set gf [thehome]/.stackato/client/group
	fileutil::writeFile $gf "\{\n  \"[thetarget]\" : \"test-group\"\n\}\n"
	set appdir [example a.original.node-env]
	indir $appdir { run push -n }
    } -body {
	run ssh --dry -a node-env {*}$cmd
    } -cleanup {
	file delete $gf
	unset gf
	unset appdir
	remove-test-app node-env
	stage-close
    } -match glob -result [ssh-cmd * $dry]
}

# # ## ### ##### ######## ############# #####################
cleanupTests
