# -*- tcl -*- tcl.tk//DSL tcltest//EN//2.0 tcl.tk//DSL tcltest//EN//2.0
## (c) 2014 Andreas Kupries
# # ## ### ##### ######## ############# #####################
## client guid (name to guid conversion)

kt check Tcl     8.5
kt check tcltest 2

# # ## ### ##### ######## ############# #####################

kt source support/common.tcl

# # ## ### ##### ######## ############# #####################

test guid-1.0 {client guid, wrong args, too many} -setup {
    stage-open
} -body {
    run guid T N X
} -cleanup {
    stage-close
} -returnCodes error -match glob -result "wrong#args, too many*"

test guid-1.1 {client guid, wrong args, not enough} -setup {
    stage-open
} -body {
    run guid
} -cleanup {
    stage-close
} -returnCodes error -match glob -result "wrong#args, not enough*"

test guid-1.2 {client guid, requires a CFv2 target} -constraints cfv1 -setup {
    stage-open
    ref-target
} -body {
    run guid organization [theorg]
} -cleanup {
    stage-close
} -returnCodes error -result {Error: This command requires a target exporting the CF v2 API}

test guid-1.3 {client guid, login required} -constraints cfv2 -setup {
    stage-open
    ref-target
} -body {
    run guid organization [theorg]
} -cleanup {
    stage-close
} -returnCodes error -result [login-required]

test guid-1.4 {client guid, non-admin login is ok} -constraints cfv2 -setup {
    stage-open
    ref-target
    go-admin
    go-non-admin
} -body {
    run guid organization [theorg]
} -cleanup {
    go-admin
    remove-non-admin
    stage-close
} -match glob -result *

test guid-1.5 {client guid} -constraints cfv2 -setup {
    stage-open
    ref-target
    go-admin
} -body {
    run guid organization [theorg]
} -cleanup {
    stage-close
} -match glob -result [map [viewFile data/guid.txt] @org@ [theorg]]

test guid-1.6 {client guid, json} -constraints cfv2 -setup {
    stage-open
    ref-target
    go-admin
} -body {
    run guid --json organization [theorg]
} -cleanup {
    stage-close
} -match glob -result [viewFile data/guid-json.txt]

# Test that the various entities work.

test guid-1.7 {client guid} -constraints cfv2 -setup {
    stage-open
    ref-target
    go-admin
} -body {
    run guid space [thespace]
} -cleanup {
    stage-close
} -match glob -result *

test guid-1.8 {client guid} -constraints cfv2 -setup {
    stage-open
    ref-target
    go-admin
} -body {
    run guid user [adminuser]
} -cleanup {
    stage-close
} -match glob -result *

test guid-1.9 {client guid} -constraints cfv2 -setup {
    stage-open
    ref-target
    go-admin
} -body {
    run guid domain [targetdomain]
} -cleanup {
    stage-close
} -match glob -result *

test guid-1.10 {client guid} -constraints cfv2 -setup {
    stage-open
    ref-target
    go-admin
} -body {
    run guid quota_definition default
} -cleanup {
    stage-close
} -match glob -result *

test guid-1.11 {client guid} -constraints cfv2 -setup {
    stage-open
    ref-target
    go-admin
} -body {
    run guid stack alsek
} -cleanup {
    stage-close
} -match glob -result *

test guid-1.12 {client guid} -constraints cfv2 -setup {
    stage-open
    ref-target
    go-admin
} -body {
    run guid zone default
} -cleanup {
    stage-close
} -match glob -result *

test guid-1.12 {client guid} -constraints cfv2 -setup {
    stage-open
    ref-target
    go-admin
} -body {
    run guid service_plan free
} -cleanup {
    stage-close
} -match glob -result *

test guid-1.12 {client guid} -constraints cfv2 -setup {
    stage-open
    ref-target
    go-admin
} -body {
    run guid service mysql
} -cleanup {
    stage-close
} -match glob -result *

# The remaining todos are possibly better done in the associated test
# files, because there we have entities to test with.
TODO app
TODO route
TODO service_auth_token
TODO service_broker
TODO service_instance

# # ## ### ##### ######## ############# #####################
cleanupTests
