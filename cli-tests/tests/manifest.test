# -*- tcl -*- tcl.tk//DSL tcltest//EN//2.0 tcl.tk//DSL tcltest//EN//2.0
## (c) 2013 Andreas Kupries
# # ## ### ##### ######## ############# #####################
## debug-manifest        --- Investigate manifest processing.
## debug-upload-manifest --- Investigate manifest generation for push (v1, v2)

## ??? --- Investigate manifest saving for no manifest

kt check Tcl     8.5
kt check tcltest 2

# # ## ### ##### ######## ############# #####################

kt source support/common.tcl

# # ## ### ##### ######## ############# #####################
## Basic argument handling, and special situations.

test manifest-1.0 {debug-manifest, wrong args, too many} -setup {
    stage-open
} -body {
    run debug-manifest X
} -cleanup {
    stage-close
} -returnCodes error -match glob -result "wrong#args, too many*"

test manifest-1.1 {debug-manifest, empty application, no manifest} -setup {
    stage-open
    go-admin
} -body {
    indir [appdir] { run debug-manifest }
} -cleanup {
    remove-appdir
    stage-close
} -result {No manifest
No configuration found}

test manifest-1.2 {debug-upload-manifest, wrong args, not enough} -setup {
    stage-open
} -body {
    run debug-upload-manifest -n
} -cleanup {
    stage-close
} -returnCodes error -match glob -result "wrong#args, not enough*"

test manifest-1.3 {debug-upload-manifest, wrong args, too many} -setup {
    stage-open
} -body {
    run debug-upload-manifest -n V A X
} -cleanup {
    stage-close
} -returnCodes error -match glob -result "wrong#args, too many*"

test manifest-1.4 {debug-upload-manifest, empty application, no manifest} -setup {
    stage-open
    go-admin
} -body {
    indir [appdir] { run debug-upload-manifest -n 1 X }
} -cleanup {
    remove-appdir
    stage-close
} -returnCodes error -result {Error: Failed to find 'X' in manifest.}

# # ## ### ##### ######## ############# #####################
## General handling of various types of manifests (stackato and CF side).
## NOTE: Need CF v2 type examples.

foreach {n label theapp} {
     0 plain                                 a.original.node-env
     1 {application in subdirectory}         appdir
     2 {env variables}                       env
     3 {env vars via manifest.yml}           env-manifest.yml
     4 {staging/run hooks}                   hooks
     5 {num instances -1}                    instances-1
     6 {num instances 0}                     instances0
     7 {num instances 2}                     instances2
     8 {min client version check fail}       minclient-bad
     9 {min client version check ok}         minclient-ok
    10 {min server version check fail}       minserver-bad
    11 {min server version check ok}         minserver-ok
    12 {install required packages}           requirements
    13 {install package already present}     requirements-already
    14 {install unknown package}             requirements-bad
    15 {url mapping}                         urls
    16 {memory -1}                           memory-1
    17 {memory 0}                            memory0
    18 {multi app, dependencies}             multi-depends-on
    19 {multi app, manifest inclusion}       multi-inherit
    20 {multi app CF manifest}               multi-manifest.yml
    21 {multi app CF manifest, stackato.yml} multi-stackato.yml-m
    22 {multi app Stackato}                  multi-stackato.yml-s
    23 {env vars via manifest.yml, v2}       env-manifest.yml-v2
    24 {multi app, dependencies, v2}         multi-depends-on-v2
} {
    # - -- --- ----- -------- -------------

    set appdir [example $theapp]
    set m      [themanifest $appdir]

    set     map0 {}
    lappend map0 @BASE@   [thebase]
    lappend map0 @APPDIR@ $appdir

    set map1 $map0
    lappend map0 @YML@    [file tail $m]
    lappend map1 @YML@    [fileutil::stripPwd $m]

    set expected0 [string map $map0 [result $theapp -imanifest]]
    set expected1 [string map $map1 [result $theapp -imanifest]]

    set expected20 [string map $map0 [result $theapp -umanifest1]]
    set expected30 [string map $map0 [result $theapp -umanifest2]]

    set expected21 [string map $map1 [result $theapp -umanifest1]]
    set expected31 [string map $map1 [result $theapp -umanifest2]]

    # 2.<n>.[2345]
    set appname node-env
    if {$n in {18 19 20 21 22 24}} { set appname node-env2 }

    # - -- --- ----- -------- -------------

    test manifest-2.$n.0 "debug-manifest (implied), $label" -setup {
	stage-open
	go-admin
    } -body {
	indir $appdir { run debug-manifest }
    } -cleanup {
	stage-close
    } -result $expected0

    test manifest-2.$n.1 "debug-manifest (--path, --manifest), $label" -setup {
	stage-open
	go-admin
    } -body {
	run debug-manifest --path $appdir --manifest [themanifest $appdir]
    } -cleanup {
	stage-close
    } -result $expected1

    # - -- --- ----- -------- -------------

    test manifest-2.$n.2 "debug-upload-manifest (implied), $label, v1" -setup {
	stage-open
	go-admin
    } -body {
	indir $appdir { run debug-upload-manifest -n 1 $appname }
    } -cleanup {
	stage-close
    } -result $expected20

    test manifest-2.$n.3 "debug-upload-manifest (implied), $label, v2" -setup {
	stage-open
	go-admin
    } -body {
	indir $appdir { run debug-upload-manifest -n 2 $appname }
    } -cleanup {
	stage-close
    } -result $expected30

    test manifest-2.$n.4 "debug-upload-manifest (--path, --manifest), $label, v1" -setup {
	stage-open
	go-admin
    } -body {
	run debug-upload-manifest -n --path $appdir --manifest [themanifest $appdir] 1 $appname
    } -cleanup {
	stage-close
    } -result $expected21

    test manifest-2.$n.5 "debug-upload-manifest (--path, --manifest), $label, v2" -setup {
	stage-open
	go-admin
    } -body {
	run debug-upload-manifest -n --path $appdir --manifest [themanifest $appdir] 2 $appname
    } -cleanup {
	stage-close
    } -result $expected31

    # - -- --- ----- -------- -------------
}

# # ## ### ##### ######## ############# #####################

# TODO: examples of all possible manifest errors, and warnings
# The current cases represent a very limited subset.

foreach {n label theapp expected} {
    0 {bad hook command syntax} 
    hooks-syntax
    {Manifest validation error: Expected a yaml scalar for element of sequence key "hooks:pre-running", got a mapping}

    1 {app without name, stackato.yml}
    no-name-s
    {Manifest error: The stackato application has no name}

    2 {app without name, manifest.yml}
    no-name-m-v1
    {Manifest error: Application @ path "." has no name}

    3 {app without name, manifest.yml}
    no-name-m-v2
    {Manifest error: Application <0> has no name}
} {
    set appdir [example $theapp]

    test manifest-3.$n.0 "debug-manifest (implied), manifest error: $label" -setup {
	stage-open
	go-admin
    } -body {
	indir $appdir { run debug-manifest -n }
    } -cleanup {
	stage-close
    } -returnCodes error -match glob -result $expected

    test manifest-3.$n.1 "debug-manifest (--manifest, --path), manifest error: $label" -setup {
	stage-open
	go-admin
    } -body {
	run debug-manifest -n --path $appdir --manifest [themanifest $appdir]
    } -cleanup {
	stage-close
    } -returnCodes error -match glob -result $expected
}

# # ## ### ##### ######## ############# #####################
cleanupTests
