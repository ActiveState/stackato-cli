# -*- tcl -*- tcl.tk//DSL tcltest//EN//2.0 tcl.tk//DSL tcltest//EN//2.0
# # ## ### ##### ######## ############# #####################

## Copyright (c) 2013 ActiveState Software Inc.
## See file doc/license.txt for the license terms.

# # ## ### ##### ######## ############# #####################
## group management, group querying (listing users)

kt check Tcl     8.5
kt check tcltest 2

# # ## ### ##### ######## ############# #####################

kt source support/common.tcl

# # ## ### ##### ######## ############# #####################

test groups-users-1.0 {groups users, wrong args, too many} -setup {
    stage-open
} -body {
    run groups users G X
} -cleanup {
    stage-close
} -returnCodes error -match glob -result "wrong#args, too many*"

test groups-users-1.1 {groups users, wrong args, not enough} -setup {
    stage-open
    go-admin
} -body {
    run groups users
} -cleanup {
    stage-close
} -returnCodes error -result "Error: Need a valid group name"

test groups-users-1.2 {groups users, login required} -setup {
    stage-open
    ref-target
} -body {
    run groups users G
} -cleanup {
    stage-close
} -returnCodes error -result {Login Required
Please use 'stackato login'}

test groups-users-1.3 {groups users, admin login required} -setup {
    stage-open
    go-admin
    go-non-admin
} -body {
    run groups users G
} -cleanup {
    be-admin
    remove-non-admin
    stage-close
} -returnCodes error -result {Error 100: Bad request}

test groups-users-1.4 {groups users, bogus group} -setup {
    stage-open
    go-admin
} -body {
    run groups users bogus
} -cleanup {
    stage-close
} -returnCodes error -result {Error 100: Bad request}

test groups-users-1.5 {groups users, nothing} -setup {
    stage-open
    go-admin
    run groups create test-group
} -body {
    run groups users test-group
} -cleanup {
    run groups delete test-group
    stage-close
} -result {No Users}

test groups-users-1.6 {groups users, nothing, json} -setup {
    stage-open
    go-admin
    run groups create test-group
} -body {
    run groups users test-group --json
} -cleanup {
    run groups delete test-group
    stage-close
} -result {[]}

test groups-users-1.7 {groups users, with users} -setup {
    stage-open
    go-admin
    run add-user        grouper@test --passwd hush
    run groups create   test-group
    run groups add-user test-group grouper@test
} -body {
    run groups users test-group
} -cleanup {
    run groups delete-user test-group grouper@test
    run groups delete      test-group
    run delete-user        grouper@test
    stage-close
} -result {+--------------+
| Member       |
+--------------+
| grouper@test |
+--------------+}

test groups-users-1.8 {groups users, with users, json} -setup {
    stage-open
    go-admin
    run add-user        grouper@test --passwd hush
    run groups create   test-group
    run groups add-user test-group grouper@test
} -body {
    run groups users test-group --json
} -cleanup {
    run groups delete-user test-group grouper@test
    run groups delete      test-group
    run delete-user        grouper@test
    stage-close
} -result {["grouper@test"]}

# # ## ### ##### ######## ############# #####################
## Implied group, through current group

test groups-users-1.9 {groups users, current group, nothing} -setup {
    stage-open
    go-admin
    run groups create test-group
    run group         test-group
} -body {
    run groups users
} -cleanup {
    run groups delete test-group
    stage-close
} -result {No Users}

test groups-users-1.10 {groups users, current group, nothing, json} -setup {
    stage-open
    go-admin
    run groups create test-group
    run group         test-group
} -body {
    run groups users --json
} -cleanup {
    run groups delete test-group
    stage-close
} -result {[]}

test groups-users-1.11 {groups users, current group, with users} -setup {
    stage-open
    go-admin
    run add-user        grouper@test --passwd hush
    run groups create   test-group
    run groups add-user test-group grouper@test
    run group           test-group
} -body {
    run groups users
} -cleanup {
    run groups delete-user test-group grouper@test
    run groups delete      test-group
    run delete-user        grouper@test
    stage-close
} -result {+--------------+
| Member       |
+--------------+
| grouper@test |
+--------------+}

test groups-users-1.12 {groups users, current group, with users, json} -setup {
    stage-open
    go-admin
    run add-user        grouper@test --passwd hush
    run groups create   test-group
    run groups add-user test-group grouper@test
    run group           test-group
} -body {
    run groups users --json
} -cleanup {
    run groups delete-user test-group grouper@test
    run groups delete      test-group
    run delete-user        grouper@test
    stage-close
} -result {["grouper@test"]}

# # ## ### ##### ######## ############# #####################
cleanupTests
