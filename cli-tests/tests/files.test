# -*- tcl -*- tcl.tk//DSL tcltest//EN//2.0 tcl.tk//DSL tcltest//EN//2.0
## (c) 2013 Andreas Kupries
# # ## ### ##### ######## ############# #####################
## files

kt check Tcl     8.5
kt check tcltest 2

# # ## ### ##### ######## ############# #####################

kt source support/common.tcl

# # ## ### ##### ######## ############# #####################

test files-1.0 {files, wrong args, too many} -setup {
    stage-open
    go-admin
} -body {
    run files A P X
} -cleanup {
    stage-close
} -returnCodes error -match glob -result "wrong#args, too many*"

test files-1.1 {files, wrong args, not enough} -setup {
    stage-open
    go-admin
} -body {
    indir [appdir] { run files -n }
} -cleanup {
    remove-appdir
    stage-close
} -returnCodes error -match glob -result "wrong#args, not enough*"

test files-1.2 {files, bogus app} -setup {
    stage-open
    go-admin
} -body {
    indir [appdir] { run files -n A }
} -cleanup {
    remove-appdir
    stage-close
} -returnCodes error -result [unexpected input application application A \
				  "in space '[theorg]::[thespace]'"]

# # ## ### ##### ######## ############# #####################
## Note: Ignoring the 'log' output as it is timing sensitive and may
## not contain everything needed to match because of that.

set flist1 {app/                                         -
bin/ *
logs/ *
run.pid *
runtime-helper.pl *
setenv.json *
setenv.sh *
setps1.sh *
stackato/ *
staging_tmp/ *
startup *
stop *
wait_for_fs.rb *}

set flist2 {.ActivePerl/ *
.bash_logout *
.bashrc *
.cache/ *
.env *
.hushlogin *
.profile *
.ssh/ *
app/ *
droplet.log *
etc/ *
logs/ *
run.pid *
runtime-helper.pl *
setenv.json *
setenv.sh *
setps1.sh *
staging_info.yml *
tmp/ *
wait_for_fs.rb *}

# # ## ### ##### ######## ############# #####################

test files-1.3 {files, auto-select app} -setup {
    stage-open
    go-admin
    set appdir [example a.original.node-env]
    indir $appdir { run push -n }
} -body {
    indir $appdir { run files . }
} -cleanup {
    unset appdir
    remove-test-app node-env
    stage-close
} -match glob -result [per-api $flist1 $flist2]

test files-1.4 {files, explicit app} -setup {
    stage-open
    go-admin
    set appdir [example a.original.node-env]
    indir $appdir { run push -n }
} -body {
    run files node-env
} -cleanup {
    unset appdir
    remove-test-app node-env
    stage-close
} -match glob -result [per-api $flist1 $flist2]

TODO files --target, --group, multiple dependent apps.
TODO files - path spec.

# # ## ### ##### ######## ############# #####################
cleanupTests
