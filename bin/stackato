#!/bin/sh
# -*- tcl -*- \
exec tclsh "$0" ${1+"$@"}
package require Tcl 8.5
# # ## ### ##### ######## ############# #####################
## Copyright (c) 2011-2015 ActiveState Software Inc
## (c) Copyright 2015 Hewlett Packard Enterprise Development LP

# lib is sibling of bin, directory of this file.
# The _XXX_ is a trick, extending the path to force
# normalize to follow a symlink in the last path segment.
# We use an additional dirname to get rid of it again.

proc ploc {p} {
    # Determine location of named package, i.e. where it was loaded/sourced from
    package ifneeded $p [package present $p]
}

# When testing self-containment use only the local lib/ and ext/ for
# directories for packages.
#set auto_path {}
#tcl::tm::path remove {*}[tcl::tm::path list]

::apply {{topdir} {
    #puts @$topdir

    lappend ::auto_path $topdir/lib

    package require platform
    foreach arch [platform::patterns [platform::identify]] {
	#puts $arch\t$topdir/vendor/P-$arch

	if {![file exists $topdir/vendor/P-$arch]} continue
	lappend ::auto_path $topdir/vendor/P-$arch
    }

    return
}} [file dirname \
	[file dirname \
	     [file dirname \
		  [file normalize \
		       [info script]/_XXX_]]]]

#puts AP\t[join [lsort -dict $auto_path] \nAP\t]
#puts TM\t[join [lsort -dict [tcl::tm::path list]] \nTM\t]

#rename exit __exit ; proc exit {args} { puts [join [info loaded] \n] ; foreach p [lsort -dict [package names]] { catch { puts [package ifneeded $p [package present $p]] } } ; uplevel 1 __exit {*}$args }

if {[info exists ::env(STACKATO_APP_ROOT)]} {
    set ::env(HOME) $::env(STACKATO_APP_ROOT)
}

# Pseudo-package dict of Tcl 8.5, not defined on some platforms, it seems 
catch { package provide dict 8.5.3.1 }

if {![info exists ::env(HOME)]} {
    puts stderr "Could not determine HOME environment."
    ::exit 1
}

package require debug
package require debug::caller
package require cmdr::help::json
package require stackato::cmdr
package require stackato::cmd::color
package require cmdr::color

# Stackato specific standard color names
# - trace output.
# - log output, system vs application
cmdr color define trace   e30,46  ;# text=black, bg=cyan (currently cannot aggregate new color by symbolic codes).
cmdr color define log-sys e33     ;# text=yellow
cmdr color define log-app e36     ;# text=cyan
stackato::cmd::color import

#TODO: Read and integrate external color configuration file.

package require term::ansi::code::ctrl ; # ANSI terminal control codes
#debug header  {[term::ansi::code::ctrl::sda_bgblack][term::ansi::code::ctrl::sda_bgcyan][pid] :: }
#debug trailer {[term::ansi::code::ctrl::sda_reset]}
debug trailer {[::cmdr color reset]}

if {[lindex $argv 0] eq "--child"} {
    # Child processes (log stream, for example).
    # Append to trace (REST).
    # Regarding ::CHILD see lib/mgr/client.tcl (RestLog) for use.

    set argv [lrange $argv 1 end]
    set ::CHILD 1
    debug header {[::cmdr color trace]CHILD [pid] @ [clock format [clock seconds]] :: }

} else {
    # Toplevel process. Overwrite old trace (REST).
    set ::CHILD 0
    #debug header {[term::ansi::code::ctrl::sda_bgblack][term::ansi::code::ctrl::sda_bgcyan]MAIN  [pid] @ [clock format [clock seconds]] :: }
    debug header {[::cmdr color trace]MAIN  [pid] @ [clock format [clock seconds]] :: }
}

try {
    # Process all --color flags we can find. Done before cmdr gets
    # hold of the command line to enable the deactivation of --debug
    # colorization as early as we can.
    set copy $argv
    while {[llength $copy]} {
	set copy [lassign $copy first]
	switch -exact -- $first {
	    --color {
		set copy [lassign $copy mode]
		switch -exact -- $mode {
		    auto   {
			# Nothing to do, system default, already in place.
		    }
		    always { cmdr color activate 1 }
		    never  { cmdr color activate 0 }
		}
	    }
	    --color=auto {
		# Nothing to do, system default, already in place.
	    }
	    --color=always { cmdr color activate 1 }
	    --color=never  { cmdr color activate 0 }
	    default {}
	}
    }

    # Process all --debug flags we can find. Done before cmdr gets
    # hold of the command line to enable debugging the innards of cmdr.
    set copy $argv
    while {[llength $copy]} {
	set copy [lassign $copy first]
	switch -glob -- $first {
	    --debug {
		set copy [lassign $copy tag]
		debug on $tag
	    }
	    --debug=* {
		regexp {^--debug=(.*)$} $first -> tag
		debug on $tag
	    }
	    default {}
	}
    }
    if {[info exists env(STACKATO_DEBUG)]} {
	foreach tag [split $env(STACKATO_DEBUG) ,] {
	    debug on $tag
	}
    }

    stackato-cli do {*}$argv

} trap {STACKATO CLIENT CLI GRACEFUL-EXIT} e {
    if {$e ne {}} { puts $e }

} trap {CMDR ACTION UNKNOWN} {e o} - \
  trap {CMDR ACTION BAD} {e o} - \
  trap {CMDR VALIDATE} {e o} - \
  trap {CMDR CONFIG BAD OPTION} {e o} - \
  trap {CMDR CONFIG WRONG-ARGS} {e o} - \
  trap {CMDR DO UNKNOWN} {e o} {
      puts [cmdr color bad $e]
      stackato::mgr exit fail
} on error {e o} {
    package require stackato::mgr::exit
    stackato::mgr::exit::ProcessInternalError $e $::errorCode $::errorInfo
    stackato::mgr exit fail
}
stackato::mgr exit done
