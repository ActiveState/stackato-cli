# -*- tcl -*- tcl.tk//DSL tcltest//EN//2.0 tcl.tk//DSL tcltest//EN//2.0
## (c) 2013 Andreas Kupries
# # ## ### ##### ######## ############# #####################
## scale

kt check Tcl     8.5
kt check tcltest 2

# # ## ### ##### ######## ############# #####################

kt source support/common.tcl

# # ## ### ##### ######## ############# #####################

test scale-mem-1.2 {mem, bogus mem value} -setup {
    stage-open
    go-admin
} -body {
    indir [appdir] { run scale --mem A }
} -cleanup {
    remove-appdir
    stage-close
} -returnCodes error -result {Expected a memory specification for option "--mem", got "A"}

test scale-mem-1.6 {mem, plain number, megabyte} -setup {
    stage-open
    go-admin
    indir [appdir] { run create-app -n TEST }
} -body {
    run scale TEST -n --mem 23
} -cleanup {
    run delete -n TEST
    remove-appdir
    stage-close
} -match glob -result {Updating Memory Reservation ?TEST? to 23M ... 
Committing changes ...*}

test scale-mem-1.7 {mem, megabyte suffix} -setup {
    stage-open
    go-admin
    indir [appdir] { run create-app -n TEST }
} -body {
    run scale TEST -n --mem 23M
} -cleanup {
    run delete -n TEST
    remove-appdir
    stage-close
} -match glob -result {Updating Memory Reservation ?TEST? to 23M ... 
Committing changes ...*}

test scale-mem-1.8 {mem, gigabyte suffix} -setup {
    stage-open
    go-admin
    indir [appdir] { run create-app -n TEST }
} -body {
    run scale TEST -n --mem 0.5G
} -cleanup {
    run delete -n TEST
    remove-appdir
    stage-close
} -match glob -result {Updating Memory Reservation ?TEST? to 512M ... 
Committing changes ...*}

test scale-mem-1.9 {mem, too small} -setup {
    stage-open
    go-admin
    indir [appdir] { run create-app -n TEST }
} -body {
    run scale TEST -n --mem 5
} -cleanup {
    run delete -n TEST
    remove-appdir
    stage-close
} -match glob -result {Updating Memory Reservation ?TEST? to 5M ... 
Committing changes ...*}

test scale-mem-1.10.1 {mem, below zero} -constraints cfv1 -setup {
    stage-open
    go-admin
    indir [appdir] { run create-app -n TEST }
} -body {
    run scale TEST -n --mem -3
} -cleanup {
    run delete -n TEST
    remove-appdir
    stage-close
} -match glob -result {Updating Memory Reservation \[TEST\] to -3M ... 
Committing changes ...*}

test scale-mem-1.10.2 {mem, below zero} -constraints cfv2 -setup {
    stage-open
    go-admin
    indir [appdir] { run create-app -n TEST }
} -body {
    run scale TEST -n --mem -3
} -cleanup {
    run delete -n TEST
    remove-appdir
    stage-close
} -returnCodes error -result {Error 100006: You have specified an invalid amount of memory for your application. (400)}

# # ## ### ##### ######## ############# #####################

test scale-mem-2.0 {mem, scale up, running app} -setup {
    stage-open
    go-admin
    indir [example a.original.node-env] { run push -n }
} -body {
    # Default is 256
    run scale node-env -n --mem 260
} -cleanup {
    run delete -n node-env
    stage-close
} -match glob -result {Updating Memory Reservation ?node-env? to 260M ... 
Committing changes ...*}

test scale-mem-2.1 {mem, scale down, running app} -setup {
    stage-open
    go-admin
    indir [example a.original.node-env] { run push -n }
} -body {
    # Default is 256
    run scale node-env -n --mem 250
} -cleanup {
    run delete -n node-env
    stage-close
} -match glob -result {Updating Memory Reservation ?node-env? to 250M ... 
Committing changes ...*}

test scale-mem-2.2 {mem, scale up, stopped app} -setup {
    stage-open
    go-admin
    indir [example a.original.node-env] { run push -n --no-start }
} -body {
    # Default is 256
    run scale node-env -n --mem 260
} -cleanup {
    run delete -n node-env
    stage-close
} -match glob -result {Updating Memory Reservation ?node-env? to 260M ... 
Committing changes ...*}

test scale-mem-2.3 {mem, scale down, stopped app} -setup {
    stage-open
    go-admin
    indir [example a.original.node-env] { run push -n --no-start }
} -body {
    # Default is 256
    run scale node-env -n --mem 250
} -cleanup {
    run delete -n node-env
    stage-close
} -match glob -result {Updating Memory Reservation ?node-env? to 250M ... 
Committing changes ...*}

# # ## ### ##### ######## ############# #####################

test scale-disk-1.2 {disk, bogus disk value} -setup {
    stage-open
    go-admin
} -body {
    indir [appdir] { run scale --disk A }
} -cleanup {
    remove-appdir
    stage-close
} -returnCodes error -result {Expected a memory specification for option "--disk", got "A"}

test scale-disk-1.6 {disk, plain number, megabyte} -setup {
    stage-open
    go-admin
    indir [appdir] { run create-app -n TEST }
} -body {
    run scale TEST -n --disk 23
} -cleanup {
    run delete -n TEST
    remove-appdir
    stage-close
} -match glob -result {Updating Disk Reservation ?TEST? to 23M ... 
Committing changes ...*}

test scale-disk-1.7 {disk, megabyte suffix} -setup {
    stage-open
    go-admin
    indir [appdir] { run create-app -n TEST }
} -body {
    run scale TEST -n --disk 23M
} -cleanup {
    run delete -n TEST
    remove-appdir
    stage-close
} -match glob -result {Updating Disk Reservation ?TEST? to 23M ... 
Committing changes ...*}

test scale-disk-1.8 {disk, gigabyte suffix} -setup {
    stage-open
    go-admin
    indir [appdir] { run create-app -n TEST }
} -body {
    run scale TEST -n --disk 0.5G
} -cleanup {
    run delete -n TEST
    remove-appdir
    stage-close
} -match glob -result {Updating Disk Reservation ?TEST? to 512M ... 
Committing changes ...*}

test scale-disk-1.9 {disk, too small} -setup {
    stage-open
    go-admin
    indir [appdir] { run create-app -n TEST }
} -body {
    run scale TEST -n --disk 5
} -cleanup {
    run delete -n TEST
    remove-appdir
    stage-close
} -match glob -result {Updating Disk Reservation ?TEST? to 5M ... 
Committing changes ...*}

test scale-disk-1.10 {disk, below zero} -setup {
    stage-open
    go-admin
    indir [appdir] { run create-app -n TEST }
} -body {
    run scale TEST -n --disk -3
} -cleanup {
    run delete -n TEST
    remove-appdir
    stage-close
} -match glob -result {Updating Disk Reservation ?TEST? to -3M ... 
Committing changes ...*}

# # ## ### ##### ######## ############# #####################

test scale-disk-2.0 {disk, scale up, running app} -setup {
    stage-open
    go-admin
    indir [example a.original.node-env] { run push -n }
} -body {
    # Default is 256
    run scale node-env -n --disk 260
} -cleanup {
    run delete -n node-env
    stage-close
} -match glob -result {Updating Disk Reservation ?node-env? to 260M ... 
Committing changes ...*}

test scale-disk-2.1 {disk, scale down, running app} -setup {
    stage-open
    go-admin
    indir [example a.original.node-env] { run push -n }
} -body {
    # Default is 256
    run scale node-env -n --disk 250
} -cleanup {
    run delete -n node-env
    stage-close
} -match glob -result {Updating Disk Reservation ?node-env? to 250M ... 
Committing changes ...*}

test scale-disk-2.2 {disk, scale up, stopped app} -setup {
    stage-open
    go-admin
    indir [example a.original.node-env] { run push -n --no-start }
} -body {
    # Default is 256
    run scale node-env -n --disk 260
} -cleanup {
    run delete -n node-env
    stage-close
} -match glob -result {Updating Disk Reservation ?node-env? to 260M ... 
Committing changes ...*}

test scale-disk-2.3 {disk, scale down, stopped app} -setup {
    stage-open
    go-admin
    indir [example a.original.node-env] { run push -n --no-start }
} -body {
    # Default is 256
    run scale node-env -n --disk 250
} -cleanup {
    run delete -n node-env
    stage-close
} -match glob -result {Updating Disk Reservation ?node-env? to 250M ... 
Committing changes ...*}

# # ## ### ##### ######## ############# #####################

test scale-instances-1.2 {instances, bogus scale value} -setup {
    stage-open
    go-admin
} -body {
    indir [appdir] { run scale --instances X }
} -cleanup {
    remove-appdir
    stage-close
} -returnCodes error -result {Expected an integer for option "--instances", got "X"}

test scale-instances-1.7 {instances, scale absolute} -setup {
    stage-open
    go-admin
    indir [appdir] { run create-app -n TEST }
} -body {
    run scale TEST -n --instances 6
} -cleanup {
    run delete -n TEST
    remove-appdir
    stage-close
} -match glob -result {Scaling Application instances up to 6 ...
Committing changes ...*}

test scale-instances-1.8 {instances, scale absolute, persist} -setup {
    stage-open
    go-admin
    indir [appdir] { run create-app -n TEST }
} -body {
    run scale TEST -n --instances 6
    run apps
} -cleanup {
    run delete -n TEST
    remove-appdir
    stage-close
} -match glob -result {*| TEST *| 6 *| STOPPED *| * | * |*}

test scale-instances-1.9 {instances, scale relative up} -setup {
    stage-open
    go-admin
    indir [appdir] { run create-app -n TEST }
    run scale TEST -n --instances 1
} -body {
    run scale TEST -n --instances +6
} -cleanup {
    run delete -n TEST
    remove-appdir
    stage-close
} -match glob -result {Scaling Application instances up to 7 ...
Committing changes ...*}

test scale-instances-1.10 {instances, scale relative up, persist} -setup {
    stage-open
    go-admin
    indir [appdir] { run create-app -n TEST }
    run scale TEST -n --instances 1
} -body {
    run scale TEST -n --instances +6
    run apps
} -cleanup {
    run delete -n TEST
    remove-appdir
    stage-close
} -match glob -result {*| TEST *| 7 *| STOPPED *| * | * |*}

test scale-instances-1.11 {instances, scale relative down} -setup {
    stage-open
    go-admin
    indir [appdir] { run create-app -n TEST }
    run scale TEST -n --instances 7
} -body {
    run scale TEST -n --instances -3
} -cleanup {
    run delete -n TEST
    remove-appdir
    stage-close
} -match glob -result {Scaling Application instances down to 4 ...
Committing changes ...*}

test scale-instances-1.12 {instances, scale relative down, persist} -setup {
    stage-open
    go-admin
    indir [appdir] { run create-app -n TEST }
    run scale TEST -n --instances 7
} -body {
    run scale TEST -n --instances -3
    run apps
} -cleanup {
    run delete -n TEST
    remove-appdir
    stage-close
} -match glob -result {*| TEST *| 4 *| STOPPED *| * | * |*}

test scale-instances-1.13 {instances, scale relative down to zero} -setup {
    stage-open
    go-admin
    indir [appdir] { run create-app -n TEST }
    run scale TEST -n --instances 7
} -body {
    run scale TEST -n --instances -7
} -cleanup {
    run delete -n TEST
    remove-appdir
    stage-close
} -returnCodes error -result {Error: There must be at least 1 instance.}

test scale-instances-1.14 {instances, scale relative down below zero} -setup {
    stage-open
    go-admin
    indir [appdir] { run create-app -n TEST }
    run scale TEST -n --instances 7
} -body {
    run scale TEST -n --instances -10
} -cleanup {
    run delete -n TEST
    remove-appdir
    stage-close
} -returnCodes error -result {Error: There must be at least 1 instance.}

# # ## ### ##### ######## ############# #####################

test scale-min-instances-1.0 {min-instances, not allowed for CFv1} -constraints cfv1 -setup {
    stage-open
    go-admin
} -body {
    indir [appdir] { run scale --min-instances 3 }
} -cleanup {
    remove-appdir
    stage-close
} -returnCodes error -result {Error: This option requires a target exporting the CF v2 API}

test scale-min-instances-1.1 {min-instances, bogus scale value, syntax} -constraints s32ge -setup {
    stage-open
    go-admin
} -body {
    indir [appdir] { run scale --min-instances X }
} -cleanup {
    remove-appdir
    stage-close
} -returnCodes error -result {Expected an integer >= 1 for option "--min-instances", got "X"}

test scale-min-instances-1.2 {min-instances, bogus scale value, syntax} -constraints s32ge -setup {
    stage-open
    go-admin
} -body {
    indir [appdir] { run scale --min-instances {} }
} -cleanup {
    remove-appdir
    stage-close
} -returnCodes error -result {Expected an integer >= 1 for option "--min-instances", got ""}

test scale-min-instances-1.3 {min-instances, bogus scale value, range} -constraints s32ge -setup {
    stage-open
    go-admin
} -body {
    indir [appdir] { run scale --min-instances 0 }
} -cleanup {
    remove-appdir
    stage-close
} -returnCodes error -result {Expected an integer >= 1 for option "--min-instances", got "0"}

test scale-min-instances-1.4 {min instances, over max} -constraints s32ge -setup {
    stage-open
    go-admin
    make-test-app
    run scale TEST -n --max-instances 1
} -body {
    run scale TEST -n --min-instances 5
} -cleanup {
    remove-test-app
    remove-appdir
    stage-close
} -returnCodes error -result {Error 150001: The app package is invalid: specified value of min_instances: 5 > current value of max_instances: 1 (400)}

test scale-min-instances-1.5 {min instances, change} -constraints s32ge -setup {
    stage-open
    go-admin
    make-test-app
    run scale TEST -n --max-instances 5
} -body {
    run scale TEST -n --min-instances 3
} -cleanup {
    remove-test-app
    remove-appdir
    stage-close
} -match glob -result "Changing Application Min Instances to 3 ...\nCommitting changes ...*"

test scale-min-instances-1.6 {min-instances, ignored pre S3.2} -constraints s30le -setup {
    stage-open
    go-admin
    make-test-app
} -body {
    run scale TEST --min-instances 3
} -cleanup {
    remove-test-app
    remove-appdir
    stage-close
} -result {Changing Application Min Instances not supported by target ...
No changes}

# # ## ### ##### ######## ############# #####################

test scale-max-instances-1.0 {max-instances, not allowed for CFv1} -constraints cfv1 -setup {
    stage-open
    go-admin
} -body {
    indir [appdir] { run scale --max-instances 3 }
} -cleanup {
    remove-appdir
    stage-close
} -returnCodes error -result {Error: This option requires a target exporting the CF v2 API}

test scale-max-instances-1.1 {max-instances, bogus scale value, syntax} -constraints s32ge -setup {
    stage-open
    go-admin
} -body {
    indir [appdir] { run scale --max-instances X }
} -cleanup {
    remove-appdir
    stage-close
} -returnCodes error -result {Expected an integer >= 1 for option "--max-instances", got "X"}

test scale-max-instances-1.2 {max-instances, bogus scale value, syntax} -constraints s32ge -setup {
    stage-open
    go-admin
} -body {
    indir [appdir] { run scale --max-instances {} }
} -cleanup {
    remove-appdir
    stage-close
} -returnCodes error -result {Expected an integer >= 1 for option "--max-instances", got ""}

test scale-max-instances-1.3 {max-instances, bogus scale value, range} -constraints s32ge -setup {
    stage-open
    go-admin
} -body {
    indir [appdir] { run scale --max-instances 0 }
} -cleanup {
    remove-appdir
    stage-close
} -returnCodes error -result {Expected an integer >= 1 for option "--max-instances", got "0"}

test scale-max-instances-1.5 {max instances, change} -constraints s32ge -setup {
    stage-open
    go-admin
    make-test-app
} -body {
    run scale TEST -n --max-instances 3
} -cleanup {
    remove-test-app
    remove-appdir
    stage-close
} -match glob -result "Changing Application Max Instances to 3 ...\nCommitting changes ...*"

test scale-max-instances-1.6 {max-instances, ignored pre S3.2} -constraints s30le -setup {
    stage-open
    go-admin
    make-test-app
} -body {
    run scale TEST --max-instances 3
} -cleanup {
    remove-test-app
    remove-appdir
    stage-close
} -result {Changing Application Max Instances not supported by target ...
No changes}

# # ## ### ##### ######## ############# #####################

test scale-min-cpu-1.0 {min-cpu, not allowed for CFv1} -constraints cfv1 -setup {
    stage-open
    go-admin
} -body {
    indir [appdir] { run scale --min-cpu 3 }
} -cleanup {
    remove-appdir
    stage-close
} -returnCodes error -result {Error: This option requires a target exporting the CF v2 API}

test scale-min-cpu-1.1 {min-cpu, bogus scale value, syntax} -constraints s32ge -setup {
    stage-open
    go-admin
} -body {
    indir [appdir] { run scale --min-cpu X }
} -cleanup {
    remove-appdir
    stage-close
} -returnCodes error -result {Expected an integral percentage for option "--min-cpu", got "X"}

test scale-min-cpu-1.2 {min-cpu, bogus scale value, syntax} -constraints s32ge -setup {
    stage-open
    go-admin
} -body {
    indir [appdir] { run scale --min-cpu {} }
} -cleanup {
    remove-appdir
    stage-close
} -returnCodes error -result {Expected an integral percentage for option "--min-cpu", got ""}

test scale-min-cpu-1.3 {min-cpu, bogus scale value, range} -constraints s32ge -setup {
    stage-open
    go-admin
} -body {
    indir [appdir] { run scale --min-cpu -1 }
} -cleanup {
    remove-appdir
    stage-close
} -returnCodes error -result {Expected an integral percentage for option "--min-cpu", got "-1"}

test scale-min-cpu-1.4 {min-cpu, bogus scale value, range} -constraints s32ge -setup {
    stage-open
    go-admin
} -body {
    indir [appdir] { run scale --min-cpu 101 }
} -cleanup {
    remove-appdir
    stage-close
} -returnCodes error -result {Expected an integral percentage for option "--min-cpu", got "101"}

test scale-min-cpu-1.5 {min cpu, over max} -constraints s32ge -setup {
    stage-open
    go-admin
    make-test-app
    run scale TEST -n --max-cpu 50
} -body {
    run scale TEST -n --min-cpu 70
} -cleanup {
    remove-test-app
    remove-appdir
    stage-close
} -returnCodes error -result {Error 100001: The app is invalid: max_cpu_threshold < min_cpu_threshold (400)}

test scale-min-cpu-1.6 {min cpu, change} -constraints s32ge -setup {
    stage-open
    go-admin
    make-test-app
    run scale TEST -n --max-cpu 100
run app TEST
} -body {
    run scale TEST -n --min-cpu 70
} -cleanup {
    remove-test-app
    remove-appdir
    stage-close
} -match glob -result "Changing Application Min CPU Threshold to 70 ...\nCommitting changes ...*"

test scale-min-cpu-1.7 {min-cpu, ignored pre S3.2} -constraints s30le -setup {
    stage-open
    go-admin
    make-test-app
} -body {
    run scale TEST --min-cpu 3
} -cleanup {
    remove-test-app
    remove-appdir
    stage-close
} -result "Changing Application Min CPU Threshold not supported by target ...\nNo changes"

# # ## ### ##### ######## ############# #####################

test scale-max-cpu-1.0 {max-cpu, not allowed for CFv1} -constraints cfv1 -setup {
    stage-open
    go-admin
} -body {
    indir [appdir] { run scale --max-cpu 3 }
} -cleanup {
    remove-appdir
    stage-close
} -returnCodes error -result {Error: This option requires a target exporting the CF v2 API}

test scale-max-cpu-1.1 {max-cpu, bogus scale value, syntax} -constraints s32ge -setup {
    stage-open
    go-admin
} -body {
    indir [appdir] { run scale --max-cpu X }
} -cleanup {
    remove-appdir
    stage-close
} -returnCodes error -result {Expected an integral percentage for option "--max-cpu", got "X"}

test scale-max-cpu-1.2 {max-cpu, bogus scale value, syntax} -constraints s32ge -setup {
    stage-open
    go-admin
} -body {
    indir [appdir] { run scale --max-cpu {} }
} -cleanup {
    remove-appdir
    stage-close
} -returnCodes error -result {Expected an integral percentage for option "--max-cpu", got ""}

test scale-max-cpu-1.3 {max-cpu, bogus scale value, range} -constraints s32ge -setup {
    stage-open
    go-admin
} -body {
    indir [appdir] { run scale --max-cpu -1 }
} -cleanup {
    remove-appdir
    stage-close
} -returnCodes error -result {Expected an integral percentage for option "--max-cpu", got "-1"}

test scale-max-cpu-1.4 {max-cpu, bogus scale value, range} -constraints s32ge -setup {
    stage-open
    go-admin
} -body {
    indir [appdir] { run scale --max-cpu 101 }
} -cleanup {
    remove-appdir
    stage-close
} -returnCodes error -result {Expected an integral percentage for option "--max-cpu", got "101"}

test scale-max-cpu-1.6 {max cpu, change} -constraints s32ge -setup {
    stage-open
    go-admin
    make-test-app
} -body {
    run scale TEST -n --max-cpu 70
} -cleanup {
    remove-test-app
    remove-appdir
    stage-close
} -match glob -result "Changing Application Max CPU Threshold to 70 ...\nCommitting changes ...*"

test scale-max-cpu-1.7 {max-cpu, ignored pre S3.2} -constraints s30le -setup {
    stage-open
    go-admin
    make-test-app
} -body {
    run scale TEST --max-cpu 3
} -cleanup {
    remove-test-app
    remove-appdir
    stage-close
} -result "Changing Application Max CPU Threshold not supported by target ...\nNo changes"

# # ## ### ##### ######## ############# #####################

test scale-autoscale-1.0 {autoscale, not allowed for CFv1} -constraints cfv1 -setup {
    stage-open
    go-admin
} -body {
    indir [appdir] { run scale --autoscale }
} -cleanup {
    remove-appdir
    stage-close
} -returnCodes error -result {Error: This option requires a target exporting the CF v2 API}

test scale-autoscale-1.1 {autoscale, change} -constraints s32ge -setup {
    stage-open
    go-admin
    make-test-app
} -body {
    run scale TEST -n --autoscale
} -cleanup {
    remove-test-app
    remove-appdir
    stage-close
} -match glob -result "Changing Application Autoscale to 1 ...\nCommitting changes ...*"

test scale-autoscale-1.2 {autoscale, ignored pre S3.2} -constraints s30le -setup {
    stage-open
    go-admin
    make-test-app
} -body {
    run scale TEST --autoscale
} -cleanup {
    remove-test-app
    remove-appdir
    stage-close
} -result {Changing Application Autoscale not supported by target ...
No changes}

# # ## ### ##### ######## ############# #####################
cleanupTests
