# -*- tcl -*- tcl.tk//DSL tcltest//EN//2.0 tcl.tk//DSL tcltest//EN//2.0
## (c) 2014 Andreas Kupries
# # ## ### ##### ######## ############# #####################
## security-groups

kt check Tcl     8.5
kt check tcltest 2

# # ## ### ##### ######## ############# #####################

kt source support/common.tcl

# # ## ### ##### ######## ############# #####################

test security-groups-1.0.0 {security-groups, wrong args, too many} -setup {
    stage-open
    ref-target
    go-admin
} -body {
    run security-groups X
} -cleanup {
    remove-appdir
    stage-close
} -returnCodes error -match glob -result "wrong#args, too many*"

test security-groups-1.0.1 {security-groups, bad option} -setup {
    stage-open
    ref-target
    go-admin
} -body {
    run security-groups -n --bogus
} -cleanup {
    stage-close
} -returnCodes error -match glob -result "Unknown option --bogus*"

test security-groups-1.0.2.0 {security-groups, option conflict} -setup {
    stage-open
    ref-target
    go-admin
} -body {
    run security-groups -n --staging --running
} -cleanup {
    stage-close
} -returnCodes error -result {You cannot use "--running" together with "--staging".}

test security-groups-1.0.2.1 {security-groups, option conflict vice versa} -setup {
    stage-open
    ref-target
    go-admin
} -body {
    run security-groups -n --running --staging
} -cleanup {
    stage-close
} -returnCodes error -result {You cannot use "--staging" together with "--running".}

test security-groups-1.1.0 {security-groups, login required} -setup {
    stage-open
    ref-target
} -body {
    run security-groups
} -cleanup {
    stage-close
} -returnCodes error -result [login-required]

test security-groups-1.1.1 {security-groups, non-admin login is ok} -constraints s342ge -setup {
    stage-open
    go-admin
    run create-security-group [thesecgroup] [tmp]/data/sg/0-rules.json
    go-non-admin
} -body {
    run security-groups
} -cleanup {
    be-admin
    run delete-security-group -n [thesecgroup]
    remove-non-admin
    stage-close
} -match glob -result "Security-Groups: *\nNo Security Groups"
# -returnCodes error -result [not-authorized]

# # ## ### ##### ######## ############# #####################

test security-groups-1.2.0 {security-groups} -constraints s342ge -setup {
    stage-open
    go-admin
    run create-security-group [thesecgroup] [tmp]/data/sg/0-rules.json
} -body {
    run security-groups
} -cleanup {
    run delete-security-group -n [thesecgroup]
    stage-close
} -match glob -result [map [viewFile data/sg/list.txt] \
			   @ta@ [thetarget] \
			   @sg@ [thesecgroup]]

test security-groups-1.2.1 {security-groups} -constraints s342ge -setup {
    stage-open
    go-admin
    run create-security-group [thesecgroup] [tmp]/data/sg/0-rules.json
} -body {
    run security-groups --json
} -cleanup {
    run delete-security-group -n [thesecgroup]
    stage-close
} -match glob -result [map [viewFile data/sg/list.json] \
			   @ta@ [thetarget] \
			   @sg@ [thesecgroup]]

test security-groups-1.3 {security-groups --staging} -constraints s342ge -setup {
    stage-open
    go-admin
    run create-security-group [thesecgroup] [tmp]/data/sg/0-rules.json
    run bind-security-group [thesecgroup] --staging
} -body {
    run security-groups --staging
} -cleanup {
    run delete-security-group -n [thesecgroup]
    stage-close
} -match glob -result [map [viewFile data/sg/list-staging.txt] \
			   @ta@ [thetarget] \
			   @sg@ [thesecgroup]]

test security-groups-1.4 {security-groups --running} -constraints s342ge -setup {
    stage-open
    go-admin
    run create-security-group [thesecgroup] [tmp]/data/sg/0-rules.json
    run bind-security-group [thesecgroup] --running
} -body {
    run security-groups --running
} -cleanup {
    run delete-security-group -n [thesecgroup]
    stage-close
} -match glob -result [map [viewFile data/sg/list-running.txt] \
			   @ta@ [thetarget] \
			   @sg@ [thesecgroup]]

test security-groups-1.5 {security-groups, specific space} -constraints s342ge -setup {
    stage-open
    go-admin
    run create-security-group [thesecgroup] [tmp]/data/sg/0-rules.json
    run bind-security-group [thesecgroup] --org [theorg] --space [thespace]
} -body {
    run security-groups
} -cleanup {
    run delete-security-group -n [thesecgroup]
    stage-close
} -match glob -result [map [viewFile data/sg/list-space.txt] \
			   @or@ [theorg] \
			   @sp@ [thespace] \
			   @ta@ [thetarget] \
			   @sg@ [thesecgroup]]

# # ## ### ##### ######## ############# #####################
cleanupTests
